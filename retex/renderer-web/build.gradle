plugins {
	id 'java'
	id 'eclipse'
	id 'org.wisepersist.gwt' version '1.1.16'
}

ext.gwtCompilerVersion = '2.9.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

gwt {
	maxHeapSize = '2000M'
	gwtVersion = gwtCompilerVersion
	// only compilable module
	modules 'com.himamis.retex.renderer.JLaTeXMathGWTExportedLibrary'
	devModules 'com.himamis.retex.renderer.JLaTeXMathGWTDev'
	compiler {
		if (project.hasProperty("gdetailed")) {
			style = org.wisepersist.gradle.plugins.gwt.Style.DETAILED
		} else {
			disableClassMetadata = true
		}
	}
	jsInteropExports {
		shouldGenerate = true;
	}
}

evaluationDependsOn ':renderer-base'
evaluationDependsOn ':gwtutil'

dependencies {
	compile project(':renderer-base'),
			project(':gwtutil'),
			files(project(':renderer-base').sourceSets.main.java.srcDirs),
			files(project(':gwtutil').sourceSets.main.java.srcDirs),
			files(file("build/generated/sources/annotationProcessor/java/main/")),
			"com.google.gwt:gwt-dev:$gwtCompilerVersion",
			"com.google.gwt:gwt-user:$gwtCompilerVersion"
	testCompile "com.google.gwt:gwt-user:$gwtCompilerVersion"

	annotationProcessor project(":gwtutil"),
			'org.gwtproject.resources:gwt-resources-processor:HEAD-SNAPSHOT'
}

compileJava.options.sourcepath = files(processResources.destinationDir).builtBy(processResources)

task runSuperDev(type: JavaExec, dependsOn: 'jar') {
	description 'Starts a codeserver, and a simple webserver for development'
	main 'com.google.gwt.dev.DevMode'
	maxHeapSize '2048m'
	classpath ((configurations.compile as Set<String>) 
		+ (sourceSets.main.allSource.srcDirs as Set<String>) 
		+ (jar.archivePath as String))
	workingDir file('war')
	args '-logLevel', 'INFO',
		'-codeServerPort', '9997',
		'-port', '8888',
		'-superDevMode',
		'-war', file('war'),
		'-generateJsInteropExports',
		'com.himamis.retex.renderer.JLaTeXMathGWTDev'
	systemProperty 'gwt.persistentunitcachedir', '../build/gwt/devModeCache'
}
task jarAll(type: Jar) {
	classifier = 'all'
	from project.sourceSets.main.java
	from project.sourceSets.main.output
	from project(':renderer-base').sourceSets.main.java
	from project(':renderer-base').sourceSets.main.output
}

task jarSources(type: Jar, dependsOn: classes) {
	classifier = 'sources'
    from sourceSets.main.allSource 
}

// exclude from the eclipse classpath the java files in the resources dir
eclipse.classpath.file { 
	whenMerged { classpath ->
		classpath.entries.find { entry -> entry.kind == 'src' && entry.path == 'src/main/resources' }.excludes = ['**/*.java']
	}
}

task cleanDist(type: Delete) {
	delete 'dist'
}

task dist(type: Copy, dependsOn: cleanDist) {
	from compileGwt
	into 'dist'
	doLast {
		// rename library
		File jsFile = file('dist/jlatexmath/jlatexmath.nocache.js')
		File newFile = file('dist/jlatexmath/jlatexmath.js')
		jsFile.renameTo(newFile)

		// remove unneeded artifacts
		File clearCacheGif = file('dist/jlatexmath/clear.cache.gif')
		clearCacheGif.delete();
		File webInfFolder = file('dist/WEB-INF')
		deleteDir(webInfFolder)
	}
}

task zipDist(type: Zip, dependsOn: dist) {
	from 'dist/jlatexmath'
	destinationDir file('dist/')
}

def deleteDir(dir) {
	if (dir.isDirectory()) {
        String[] children = dir.list();
        for (int i = 0; i < children.length; i++) {
            boolean success = deleteDir(new File(dir, children[i]));
            if (!success) {
                return false;
            }
        }
    }
    return dir.delete();
}

// https://issues.gradle.org/browse/GRADLE-2778
// http://discuss.gradle.org/t/javadoc-generation-failed-with-vaadin-dependency/2502/12
javadoc {
    options.addStringOption("sourcepath", "")
}
